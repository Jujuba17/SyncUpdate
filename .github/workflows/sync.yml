
name: Sync Freshdesk to Jira

on:
  schedule:
    - cron: '0 */2 * * *'
  workflow_dispatch:
    inputs:
      sync_hours:
        description: 'Horas para sincronizar'
        required: false
        default: '2'
      provider:
        description: 'Provider para sincronizar'
        required: false
        default: 'grupo_multi'

jobs:
  sync:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Debug - List files and validate provider
      env:
        PROVIDER: ${{ github.event.inputs.provider || 'grupo_multi' }}
      run: |
        echo "=== Debug inicial ==="
        echo "Provider recebido: '$PROVIDER'"
        
        CLEAN_PROVIDER=$(echo "$PROVIDER" | sed 's/\.template$//')
        echo "Provider limpo: '$CLEAN_PROVIDER'"
        
        echo "=== Conte√∫do config/ ==="
        ls -la config/ || echo "Pasta config n√£o existe"
        
        echo "CLEAN_PROVIDER=$CLEAN_PROVIDER" >> $GITHUB_ENV
        
    - name: Validate config file exists
      run: |
        echo "=== Validando arquivo de configura√ß√£o ==="
        CONFIG_FILE="config/${CLEAN_PROVIDER}.py"
        
        if [ ! -f "$CONFIG_FILE" ]; then
          echo "‚ùå Arquivo n√£o encontrado: $CONFIG_FILE"
          echo "Arquivos dispon√≠veis:"
          ls -la config/ || echo "Pasta config n√£o existe"
          exit 1
        fi
        
        echo "‚úÖ Arquivo encontrado: $CONFIG_FILE"
        
    - name: Setup environment with client-specific secrets
      run: |
        echo "=== Configurando vari√°veis por cliente ==="
        echo "Provider: $CLEAN_PROVIDER"
        
        # Define vari√°veis baseado no cliente
        case "$CLEAN_PROVIDER" in
          "grupo_SEK")
            echo "Configurando para SEK..."
            echo "FRESHDESK_API_KEY=${{ secrets.FRESHDESK_API_KEY }}" >> $GITHUB_ENV
            echo "JIRA_API_TOKEN=${{ secrets.JIRA_API_TOKEN }}" >> $GITHUB_ENV
            echo "FRESHDESK_DOMAIN=${{ secrets.FRESHDESK_DOMAIN }}" >> $GITHUB_ENV
            echo "JIRA_EMAIL=${{ secrets.JIRA_EMAIL }}" >> $GITHUB_ENV
            ;;
          "grupo_multi")
            echo "Configurando para MULTI..."
            echo "FRESHDESK_API_KEY=${{ secrets.FRESHDESK_API_KEY }}" >> $GITHUB_ENV
            echo "JIRA_API_TOKEN=${{ secrets.JIRA_API_TOKEN }}" >> $GITHUB_ENV
            echo "FRESHDESK_DOMAIN=${{ secrets.FRESHDESK_DOMAIN }}" >> $GITHUB_ENV
            echo "JIRA_EMAIL=${{ secrets.JIRA_EMAIL }}" >> $GITHUB_ENV
            ;;
          *)
            echo "Usando secrets gerais..."
            echo "FRESHDESK_API_KEY=${{ secrets.FRESHDESK_API_KEY }}" >> $GITHUB_ENV
            echo "JIRA_API_TOKEN=${{ secrets.JIRA_API_TOKEN }}" >> $GITHUB_ENV
            echo "FRESHDESK_DOMAIN=${{ secrets.FRESHDESK_DOMAIN }}" >> $GITHUB_ENV
            echo "JIRA_EMAIL=${{ secrets.JIRA_EMAIL }}" >> $GITHUB_ENV
            ;;
        esac
        
        echo "‚úÖ Vari√°veis configuradas!"
        
    - name: Test import and validate config
      run: |
        echo "=== Testando importa√ß√£o ==="
        python -c "
        import sys
        import os
        sys.path.append('.')

        try:
            provider = '${{ env.CLEAN_PROVIDER }}'
            config_module = __import__(f'config.{provider}', fromlist=[provider])
            
            print('‚úÖ Importa√ß√£o funcionou!')
            print(f'üìÅ Provider: {provider}')
            
            # Valida se ainda tem templates
            domain = getattr(config_module, 'FRESHDESK_DOMAIN', '')
            if 'SUBSTITUA' in domain:
                print('‚ö†Ô∏è  FRESHDESK_DOMAIN ainda est√° no template!')
            else:
                print(f'üåê Freshdesk Domain: {domain}')
            
            jira_url = getattr(config_module, 'JIRA_BASE_URL', '')
            if 'CLIENTE' in jira_url:
                print('‚ö†Ô∏è  JIRA_BASE_URL ainda est√° no template!')
            else:
                print(f'üîó Jira URL: {jira_url}')
                
            print(f'üéØ Project Key: {getattr(config_module, \"JIRA_PROJECT_KEY\", \"N/A\")}')
            
            # Testa credenciais
            api_key = getattr(config_module, 'FRESHDESK_API_KEY', None)
            if api_key:
                print(f'üîë API Key: {str(api_key)[:10]}...')
            else:
                print('‚ùå API Key n√£o encontrada!')
                
        except Exception as e:
            print(f'‚ùå Erro: {e}')
            import traceback
            traceback.print_exc()
            sys.exit(1)
        "
        
    - name: Run sync
      run: |
        echo "=== Executando sincroniza√ß√£o ==="
        python main.py ${{ env.CLEAN_PROVIDER }} --hours ${{ github.event.inputs.sync_hours || '2' }}
