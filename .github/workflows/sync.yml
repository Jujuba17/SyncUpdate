
name: Sync Freshdesk to Jira

on:
  schedule:
    - cron: '0 */2 * * *'
  workflow_dispatch:
    inputs:
      sync_hours:
        description: 'Horas para sincronizar'
        required: false
        default: '2'
      provider:
        description: 'Provider para sincronizar'
        required: false
        default: 'grupo_multi'

jobs:
  sync:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Debug - List files
      run: |
        echo "=== Estrutura do projeto ==="
        find . -type f -name "*.py" | head -20
        echo "=== Conte√∫do config/ ==="
        ls -la config/ || echo "Pasta config n√£o existe"
        
    - name: Validate config file exists
      env:
        PROVIDER: ${{ github.event.inputs.provider || 'grupo_multi' }}
      run: |
        echo "=== Verificando se arquivo de configura√ß√£o existe ==="
        CONFIG_FILE="config/${PROVIDER}.py"
        
        if [ ! -f "$CONFIG_FILE" ]; then
          echo "‚ùå Arquivo de configura√ß√£o n√£o encontrado: $CONFIG_FILE"
          echo "Arquivos dispon√≠veis na pasta config/:"
          ls -la config/ || echo "Pasta config n√£o existe"
          exit 1
        fi
        
        echo "‚úÖ Arquivo de configura√ß√£o encontrado: $CONFIG_FILE"
        echo "=== Conte√∫do do arquivo (primeiras 20 linhas) ==="
        head -20 "$CONFIG_FILE"
        
    - name: Setup config with environment variables
      env:
        FRESHDESK_API_KEY: ${{ secrets.FRESHDESK_API_KEY }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        PROVIDER: ${{ github.event.inputs.provider || 'grupo_multi' }}
      run: |
        echo "=== Preparando ambiente com vari√°veis ==="
        echo "Provider selecionado: $PROVIDER"
        echo "FRESHDESK_API_KEY: ${FRESHDESK_API_KEY:0:10}..." 
        echo "JIRA_API_TOKEN: ${JIRA_API_TOKEN:0:10}..."
        
        mkdir -p config
        touch config/__init__.py
        
    - name: Debug - Test import and validate config
      env:
        FRESHDESK_API_KEY: ${{ secrets.FRESHDESK_API_KEY }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        PROVIDER: ${{ github.event.inputs.provider || 'grupo_multi' }}
      run: |
        echo "=== Testando importa√ß√£o e validando configura√ß√£o ==="
        python -c "
        import sys
        import os
        sys.path.append('.')

        os.environ['FRESHDESK_API_KEY'] = '${{ secrets.FRESHDESK_API_KEY }}'
        os.environ['JIRA_API_TOKEN'] = '${{ secrets.JIRA_API_TOKEN }}'

        try:
            provider = '${{ github.event.inputs.provider || 'grupo_multi' }}'
            config_module = __import__(f'config.{provider}', fromlist=[provider])
            
            print('‚úÖ Importa√ß√£o funcionou!')
            print(f'üìÅ Provider: {provider}')
            print(f'üåê Freshdesk Domain: {getattr(config_module, \"FRESHDESK_DOMAIN\", \"N√ÉO DEFINIDO\")}')
            print(f'üîó Jira Base URL: {getattr(config_module, \"JIRA_BASE_URL\", \"N√ÉO DEFINIDO\")}')
            print(f'üìß Jira Email: {getattr(config_module, \"JIRA_EMAIL\", \"N√ÉO DEFINIDO\")}')
            print(f'üéØ Jira Project Key: {getattr(config_module, \"JIRA_PROJECT_KEY\", \"N√ÉO DEFINIDO\")}')
            
            api_key = getattr(config_module, 'FRESHDESK_API_KEY', 'N√ÉO DEFINIDO')
            jira_token = getattr(config_module, 'JIRA_API_TOKEN', 'N√ÉO DEFINIDO')
            
            if 'COLE_SUA_API_KEY_AQUI' in str(api_key) or 'N√ÉO DEFINIDO' in str(api_key):
                print('‚ö†Ô∏è  FRESHDESK_API_KEY parece n√£o estar configurada corretamente')
            else:
                print(f'üîë Freshdesk API Key: {str(api_key)[:10]}...')
                
            if 'COLE_SEU_TOKEN_AQUI' in str(jira_token) or 'N√ÉO DEFINIDO' in str(jira_token):
                print('‚ö†Ô∏è  JIRA_API_TOKEN parece n√£o estar configurada corretamente')
            else:
                print(f'üé´ Jira API Token: {str(jira_token)[:10]}...')
                
        except Exception as e:
            print(f'‚ùå Erro na importa√ß√£o: {e}')
            import traceback
            traceback.print_exc()
            sys.exit(1)
        "
        
    - name: Run sync
      env:
        FRESHDESK_API_KEY: ${{ secrets.FRESHDESK_API_KEY }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      run: |
        echo "=== Executando sincroniza√ß√£o ==="
        python main.py ${{ github.event.inputs.provider || 'grupo_multi' }} --hours ${{ github.event.inputs.sync_hours || '2' }}
